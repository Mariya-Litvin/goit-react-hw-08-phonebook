{"version":3,"file":"static/js/584.fd67869c.chunk.js","mappings":"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","sources":["components/App.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: baseline;\n  gap: 20px;\n  margin: 20px auto;\n  padding: 20px;\n  width: 400px;\n  min-height: 350px;\n  max-height: max-content;\n  border-radius: 5px;\n  background-color: #7fb5b5;\n  /* background-image: url('./../image/phone.jpg');\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center; */\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n`;\n","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\n// export const getError = state => state.contacts.error;\n\nexport const getFilterContacts = state => state.filter;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const LabelForm = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const InputForm = styled.input`\n  height: 20px;\n  width: 350px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  :focus {\n    outline: none;\n    border-color: #007bff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  :hover {\n    border-color: #007bff;\n  }\n`;\n\nexport const ButtonForm = styled.button`\n  width: 100px;\n  height: 30px;\n  padding: 5px;\n  font-weight: 500;\n  font-size: 14px;\n  border-radius: 5px;\n  border-color: #007bff;\n  background-color: #abcdef;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover,\n  :focus {\n    background-color: #6495ed;\n  }\n`;\n","import { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { ButtonForm, Form, InputForm, LabelForm } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  // При вводі у два поля інпуту( name, number) змінюємо значення у state\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    if (name === 'name') setName(value);\n    else if (name === 'number') setNumber(value);\n  };\n\n  const addNewContact = () => {\n    let newContact = {\n      number,\n      name,\n    };\n\n    const newContactName = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === newContact.name.toLowerCase().trim()\n    );\n\n    if (newContactName) {\n      return toast.error(`${newContact.name} is already in contacts.`);\n    } else {\n      dispatch(addContact(newContact));\n      toast('Success! This contact will be added to your Phonebook.', {\n        icon: '👏',\n      });\n    }\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    addNewContact();\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={onFormSubmit}>\n      <LabelForm>\n        Name\n        <InputForm\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          value={name}\n        />\n      </LabelForm>\n      <LabelForm>\n        Number\n        <InputForm\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          value={number}\n        />\n      </LabelForm>\n      <ButtonForm type=\"submit\">Add contact</ButtonForm>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListContactText = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const ButtonDelete = styled.button`\n  width: 60px;\n  height: 30px;\n  padding: 5px;\n  font-weight: 500;\n  font-size: 14px;\n  border-radius: 5px;\n  border-color: #007bff;\n  background-color: #abcdef;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover,\n  :focus {\n    background-color: #e28090;\n  }\n`;\n","import { ButtonDelete, ListContactText } from './ContactListItem.styled';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <ListContactText>\n        {contact.name}: {contact.number}\n      </ListContactText>\n      <ButtonDelete\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(contact.id))}\n      >\n        Delete\n      </ButtonDelete>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListContacts = styled.ul`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 10px;\n`;\n\nexport const ListContactItem = styled.li`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\n\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilterContacts } from 'redux/contacts/selectors';\nimport { ListContactItem, ListContacts } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n\n  const filter = useSelector(getFilterContacts);\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      <ListContacts>\n        {visibleContacts.map(contact => (\n          <ListContactItem key={contact.id}>\n            <ContactListItem contact={contact} />\n          </ListContactItem>\n        ))}\n      </ListContacts>\n      <p>All contacts: {contacts.length}</p>\n      {filter && <p>Filtered contacts: {visibleContacts.length}</p>}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const WrapperFilter = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const FilterText = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const InputFilter = styled.input`\n  height: 20px;\n  width: 350px;\n  padding: 5px;\n  margin-top: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  :focus {\n    outline: none;\n    border-color: #007bff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n  :hover {\n    border-color: #007bff;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { getFilterContacts } from 'redux/contacts/selectors';\nimport { FilterText, InputFilter, WrapperFilter } from './Filter.styled';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilterContacts);\n\n  const handleFindName = evt => {\n    const { value } = evt.target;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <WrapperFilter>\n      <FilterText>Find Contacts by name</FilterText>\n      <label>\n        <InputFilter\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Enter name\"\n          onChange={handleFindName}\n          value={filter}\n        />\n      </label>\n    </WrapperFilter>\n  );\n};\n","import { Wrapper } from 'components/App.styled';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\n// import { Toaster } from 'react-hot-toast';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Wrapper>\n  );\n};\n\nexport default Contacts;\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","getContacts","state","contacts","items","getFilterContacts","filter","Form","LabelForm","_templateObject2","InputForm","_templateObject3","ButtonForm","_templateObject4","ContactForm","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","handleChange","evt","_evt$target","target","value","_jsxs","onSubmit","e","preventDefault","newContact","find","contact","toLowerCase","trim","toast","concat","addContact","icon","addNewContact","children","_jsx","type","placeholder","pattern","title","required","onChange","ListContactText","ButtonDelete","ContactListItem","_ref","_Fragment","onClick","deleteContact","id","ListContacts","ListContactItem","ContactList","visibleContacts","includes","map","length","WrapperFilter","FilterText","InputFilter","Filter","setFilter","useEffect","fetchContacts"],"sourceRoot":""}